{"version":3,"sources":["Redux/Constants/test.js","Components/home.js","Redux/Actions/test.js","Components/profile.js","Components/user.js","Redux/Constants/user.js","Components/login.js","Redux/Actions/user.js","Components/authorization.js","App.js","Util/roles.js","serviceWorker.js","Components/nav.js","Redux/Reducers/test.js","Redux/Reducers/user.js","Redux/Reducers/index.js","index.js"],"names":["REDUX_TEST","home","this","props","test","react_default","a","createElement","data","Component","connect","state","testReducer","dispatch","type","payload","profile","currentUser","userName","password","roles","toString","userReducer","user","Object","values","userList","map","key","SET_CURRENT_USER","login","onUserNameChange","event","_this","setState","target","value","onPasswordChange","onLogin","find","setCurrentUser","onLogout","Form","FormGroup","Label","for","Input","name","id","placeholder","onChange","Button","onClick","WithAuthorizationConnect","compose","WrappedComponent","allowedRoles","_React$Component","WithAuthorization","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","accessible","forEach","role","userRole","React","screen","window","orientation","App","lock","className","react_router","exact","path","component","Home","Authorization","Pofile","User","Login","Boolean","location","hostname","match","nav","Nav","NavItem","react_router_dom","to","outline","color","initialState","combineReducers","length","undefined","action","objectSpread","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","Components_nav","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48113509.chunk.js","sourcesContent":["export const REDUX_TEST = \"REDUX_TEST\";","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\nimport { test } from \"../Redux/Actions/test\";\n\nclass home extends Component {\n\n  componentDidMount() {\n    this.props.test();\n  }\n\n  render() {\n    return (\n      <div>\n        Home\n        <br/>\n        {this.props.data}\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.testReducer.data\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    test: () => dispatch(test())\n  };\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(home);\n","import { \n    REDUX_TEST\n } from \"../Constants/test\";\n\nexport function test() {\n    return dispatch => {\n        dispatch({\n          type: REDUX_TEST,\n          payload: \"Redux Work !\"\n        });\n    };\n  }","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nclass profile extends Component {\n\n  render() {\n    if (this.props.currentUser === null) {\n      return (\n        <div>\n          No user login.\n        </div>\n      )\n    }\n    return (\n      <div>\n        <h5>{this.props.currentUser.userName}</h5>\n        <h5>{this.props.currentUser.password}</h5>\n        <h5>{this.props.currentUser.roles.toString()}</h5>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    currentUser: state.userReducer.currentUser,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {};\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(profile);\n","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\n\nclass user extends Component {\n\n  render() {\n    return (\n      <div>\n        {\n        Object.values(this.props.userList).map((user, key) => {\n          return (\n            <div key={key}>\n              <h6>{user.userName}</h6>\n              <h6>{user.password}</h6>\n              <h6>{user.roles.toString()}</h6>\n              <hr />\n            </div>\n          )\n        })\n      }\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userList: state.userReducer.userList\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {};\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(user);\n","export const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { connect } from \"react-redux\";\nimport { setCurrentUser } from \"../Redux/Actions/user\";\n\nclass login extends Component {\n\n  state = {\n    userName: \"user001\",\n    password: \"123456\"\n  };\n\n  onUserNameChange = (event) => {\n    this.setState({\n      userName: event.target.value\n    });\n  }\n\n  onPasswordChange = (event) => {\n    this.setState({\n      password: event.target.value\n    });\n  }\n\n  onLogin = () => {\n    const user = this.props.userList\n      .find(user =>\n        (user.userName === this.state.userName && user.password === this.state.password));\n    this.props.setCurrentUser(user);\n  }\n\n  onLogout = () => {\n    this.props.setCurrentUser(null);\n  }\n\n  render() {\n    if (this.props.currentUser === null) {\n      return (\n        <div>\n          <Form>\n            <FormGroup>\n              <Label for=\"inputUserName\">User Name</Label>\n              <Input\n                type=\"text\"\n                name=\"inputUserName\"\n                id=\"userName\"\n                placeholder=\"User Name\"\n                value={this.state.userName}\n                onChange={this.onUserNameChange}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"inputPassword\">Password</Label>\n              <Input\n                type=\"password\"\n                name=\"inputPassword\"\n                id=\"password\"\n                placeholder=\"Password\"\n                value={this.state.password}\n                onChange={this.onPasswordChange}\n              />\n            </FormGroup>\n            <Button onClick={this.onLogin}>Login</Button>\n          </Form>\n        </div>\n      )\n    }\n    return (\n      <div>\n        <h5>\n          {this.props.currentUser.userName}\n          <br /><br />\n          <Button onClick={this.onLogout}>Logout</Button>\n        </h5>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userList: state.userReducer.userList,\n    currentUser: state.userReducer.currentUser,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCurrentUser: (user) => dispatch(setCurrentUser(user))\n  };\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(login);\n","import { \n    SET_CURRENT_USER\n } from \"../Constants/user\";\n\nexport function setCurrentUser(user) {\n    return dispatch => {\n        dispatch({\n          type: SET_CURRENT_USER,\n          payload: user\n        });\n    };\n}","import { compose } from \"redux\";\nimport React from 'react'\nimport { connect } from \"react-redux\";\n\nconst Authorization = (WrappedComponent, allowedRoles) => {\n    return class WithAuthorization extends React.Component {\n\n        render() {\n            var accessible = false;\n            if (this.props.currentUser !== null) {\n                allowedRoles.forEach(role => {\n                    this.props.currentUser.roles.forEach(userRole => {\n                        if (role === userRole) {\n                            accessible = true;\n                        }\n                    });\n                });\n\n                if (accessible) {\n                    return <WrappedComponent />\n                } else {\n                    return <h1>Access Denied</h1>\n                }\n                \n            } else {\n                return <h1>No user login.</h1>\n            }\n        }\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    currentUser: state.userReducer.currentUser\n})\n\nconst WithAuthorizationConnect = compose(\n    connect(mapStateToProps, null),\n    Authorization\n);\n\nexport default WithAuthorizationConnect;\n\n","import React, { Component } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Home from \"./Components/home\";\nimport Pofile from \"./Components/profile\";\nimport User from \"./Components/user\";\nimport Login from \"./Components/login\";\nimport Authorization from \"./Components/authorization\";\nimport { ADMIN, STAFF, CEO } from \"./Util/roles\";\nimport \"./App.css\";\nvar screen = window.screen.orientation;\nclass App extends Component {\n\n  componentDidMount(){\n    screen.lock(\"portrait-primary\");\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/profile\" component={Authorization(Pofile, [STAFF])} />\n          <Route path=\"/user\" component={Authorization(User, [ADMIN, CEO])} />\n          <Route path=\"/login\" component={Login} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const ADMIN = \"ADMIN\";\nexport const STAFF = \"STAFF\";\nexport const CEO = \"CEO\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\nimport { Nav, NavItem, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nclass nav extends Component {\n\n    render() {\n        return (\n            <div>\n                <Nav>\n                    <NavItem>\n                        <NavLink to=\"/\">\n                            <Button outline color=\"info\">Home</Button>\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink to=\"/profile\">\n                            <Button outline color=\"info\">Profile</Button>\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink to=\"/user\">\n                            <Button outline color=\"info\">User List</Button>\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink to=\"/login\">\n                            <Button outline color=\"info\">Login</Button>\n                        </NavLink>\n                    </NavItem>\n                </Nav>\n            </div>\n        )\n    }\n}\n\nexport default nav\n","import { \n    REDUX_TEST,\n } from \"../Constants/test\";\n  \n  const initialState = {\n    data: null\n  };\n  \n  export default function tableReducer(state = initialState, action) {\n    switch (action.type) {\n      case REDUX_TEST:\n        return {\n          ...state,\n          data: action.payload\n        };\n\n      default:\n        return state;\n    }\n  }","\nimport {\n    ADMIN,\n    STAFF,\n    CEO\n} from \"../../Util/roles\";\nimport { SET_CURRENT_USER } from \"../Constants/user\";\n\nconst initialState = {\n    userList: [\n        {\n            userName: \"user001\",\n            password: \"123456\",\n            roles: [ADMIN, STAFF]\n        },\n        {\n            userName: \"user002\",\n            password: \"123456\",\n            roles: [ADMIN]\n        },\n        {\n            userName: \"user003\",\n            password: \"123456\",\n            roles: [STAFF]\n        },\n        {\n            userName: \"user004\",\n            password: \"123456\",\n            roles: [CEO]\n        },\n    ],\n    currentUser: null\n};\n\nexport default function tableReducer(state = initialState, action) {\n    switch (action.type) {\n\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                currentUser: action.payload\n            };\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport TestReducer from \"./test\";\nimport UserReducer from \"./user\";\n\nexport default combineReducers({\n    testReducer: TestReducer,\n    userReducer: UserReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from \"./Components/nav\";\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from \"redux\";\nimport reducers from \"./Redux/Reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(\n    reducers,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <Nav />\n            <App />\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}