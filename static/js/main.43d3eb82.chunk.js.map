{"version":3,"sources":["Redux/Constants/test.js","Components/home.js","Redux/Actions/test.js","Components/profile.js","Components/user.js","Redux/Constants/user.js","Components/login.js","Redux/Actions/user.js","Components/authorization.js","App.js","Util/roles.js","serviceWorker.js","Components/nav.js","Redux/Reducers/test.js","Redux/Reducers/user.js","Redux/Reducers/index.js","index.js"],"names":["REDUX_TEST","home","this","props","test","react_default","a","createElement","data","Component","connect","state","testReducer","dispatch","type","payload","profile","currentUser","userName","password","roles","toString","userReducer","user","Object","values","userList","map","key","SET_CURRENT_USER","login","onUserNameChange","event","_this","setState","target","value","onPasswordChange","onLogin","find","setCurrentUser","onLogout","Form","FormGroup","Label","for","Input","name","id","placeholder","onChange","Button","onClick","WithAuthorizationConnect","compose","WrappedComponent","allowedRoles","_React$Component","WithAuthorization","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","accessible","forEach","role","userRole","React","App","className","react_router","exact","path","component","Home","Authorization","Pofile","User","Login","Boolean","window","location","hostname","match","nav","Nav","NavItem","react_router_dom","to","outline","color","initialState","combineReducers","length","undefined","action","objectSpread","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","Components_nav","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43d3eb82.chunk.js","sourcesContent":["export const REDUX_TEST = \"REDUX_TEST\";","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { test } from \"../Redux/Actions/test\";\r\n\r\nclass home extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.test();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Home DEPLOY FOR NEKKY\r\n        <br/>\r\n        {this.props.data}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    data: state.testReducer.data\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    test: () => dispatch(test())\r\n  };\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(home);\r\n","import { \r\n    REDUX_TEST\r\n } from \"../Constants/test\";\r\n\r\nexport function test() {\r\n    return dispatch => {\r\n        dispatch({\r\n          type: REDUX_TEST,\r\n          payload: \"Redux Work !\"\r\n        });\r\n    };\r\n  }","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nclass profile extends Component {\r\n\r\n  render() {\r\n    if (this.props.currentUser === null) {\r\n      return (\r\n        <div>\r\n          No user login.\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div>\r\n        <h5>{this.props.currentUser.userName}</h5>\r\n        <h5>{this.props.currentUser.password}</h5>\r\n        <h5>{this.props.currentUser.roles.toString()}</h5>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentUser: state.userReducer.currentUser,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {};\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(profile);\r\n","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nclass user extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {\r\n        Object.values(this.props.userList).map((user, key) => {\r\n          return (\r\n            <div key={key}>\r\n              <h6>{user.userName}</h6>\r\n              <h6>{user.password}</h6>\r\n              <h6>{user.roles.toString()}</h6>\r\n              <hr />\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userList: state.userReducer.userList\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {};\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(user);\r\n","export const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React, { Component } from 'react'\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentUser } from \"../Redux/Actions/user\";\r\n\r\nclass login extends Component {\r\n\r\n  state = {\r\n    userName: \"user001\",\r\n    password: \"123456\"\r\n  };\r\n\r\n  onUserNameChange = (event) => {\r\n    this.setState({\r\n      userName: event.target.value\r\n    });\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({\r\n      password: event.target.value\r\n    });\r\n  }\r\n\r\n  onLogin = () => {\r\n    const user = this.props.userList\r\n      .find(user =>\r\n        (user.userName === this.state.userName && user.password === this.state.password));\r\n    this.props.setCurrentUser(user);\r\n  }\r\n\r\n  onLogout = () => {\r\n    this.props.setCurrentUser(null);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.currentUser === null) {\r\n      return (\r\n        <div>\r\n          <Form>\r\n            <FormGroup>\r\n              <Label for=\"inputUserName\">User Name</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"inputUserName\"\r\n                id=\"userName\"\r\n                placeholder=\"User Name\"\r\n                value={this.state.userName}\r\n                onChange={this.onUserNameChange}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"inputPassword\">Password</Label>\r\n              <Input\r\n                type=\"password\"\r\n                name=\"inputPassword\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                value={this.state.password}\r\n                onChange={this.onPasswordChange}\r\n              />\r\n            </FormGroup>\r\n            <Button onClick={this.onLogin}>Login</Button>\r\n          </Form>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div>\r\n        <h5>\r\n          {this.props.currentUser.userName}\r\n          <br /><br />\r\n          <Button onClick={this.onLogout}>Logout</Button>\r\n        </h5>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userList: state.userReducer.userList,\r\n    currentUser: state.userReducer.currentUser,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setCurrentUser: (user) => dispatch(setCurrentUser(user))\r\n  };\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(login);\r\n","import { \r\n    SET_CURRENT_USER\r\n } from \"../Constants/user\";\r\n\r\nexport function setCurrentUser(user) {\r\n    return dispatch => {\r\n        dispatch({\r\n          type: SET_CURRENT_USER,\r\n          payload: user\r\n        });\r\n    };\r\n}","import { compose } from \"redux\";\r\nimport React from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Authorization = (WrappedComponent, allowedRoles) => {\r\n    return class WithAuthorization extends React.Component {\r\n\r\n        render() {\r\n            var accessible = false;\r\n            if (this.props.currentUser !== null) {\r\n                allowedRoles.forEach(role => {\r\n                    this.props.currentUser.roles.forEach(userRole => {\r\n                        if (role === userRole) {\r\n                            accessible = true;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                if (accessible) {\r\n                    return <WrappedComponent />\r\n                } else {\r\n                    return <h1>Access Denied</h1>\r\n                }\r\n                \r\n            } else {\r\n                return <h1>No user login.</h1>\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentUser: state.userReducer.currentUser\r\n})\r\n\r\nconst WithAuthorizationConnect = compose(\r\n    connect(mapStateToProps, null),\r\n    Authorization\r\n);\r\n\r\nexport default WithAuthorizationConnect;\r\n\r\n","import React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport Home from \"./Components/home\";\r\nimport Pofile from \"./Components/profile\";\r\nimport User from \"./Components/user\";\r\nimport Login from \"./Components/login\";\r\nimport Authorization from \"./Components/authorization\";\r\nimport { ADMIN, STAFF, CEO } from \"./Util/roles\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/profile\" component={Authorization(Pofile, [STAFF])} />\r\n          <Route path=\"/user\" component={Authorization(User, [ADMIN, CEO])} />\r\n          <Route path=\"/login\" component={Login} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export const ADMIN = \"ADMIN\";\r\nexport const STAFF = \"STAFF\";\r\nexport const CEO = \"CEO\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Nav, NavItem, Button } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass nav extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Nav>\r\n                    <NavItem>\r\n                        <NavLink to=\"/\">\r\n                            <Button outline color=\"info\">Home</Button>\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to=\"/profile\">\r\n                            <Button outline color=\"info\">Profile</Button>\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to=\"/user\">\r\n                            <Button outline color=\"info\">User List</Button>\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to=\"/login\">\r\n                            <Button outline color=\"info\">Login</Button>\r\n                        </NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default nav\r\n","import { \r\n    REDUX_TEST,\r\n } from \"../Constants/test\";\r\n  \r\n  const initialState = {\r\n    data: null\r\n  };\r\n  \r\n  export default function tableReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case REDUX_TEST:\r\n        return {\r\n          ...state,\r\n          data: action.payload\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }","\r\nimport {\r\n    ADMIN,\r\n    STAFF,\r\n    CEO\r\n} from \"../../Util/roles\";\r\nimport { SET_CURRENT_USER } from \"../Constants/user\";\r\n\r\nconst initialState = {\r\n    userList: [\r\n        {\r\n            userName: \"user001\",\r\n            password: \"123456\",\r\n            roles: [ADMIN, STAFF]\r\n        },\r\n        {\r\n            userName: \"user002\",\r\n            password: \"123456\",\r\n            roles: [ADMIN]\r\n        },\r\n        {\r\n            userName: \"user003\",\r\n            password: \"123456\",\r\n            roles: [STAFF]\r\n        },\r\n        {\r\n            userName: \"user004\",\r\n            password: \"123456\",\r\n            roles: [CEO]\r\n        },\r\n    ],\r\n    currentUser: null\r\n};\r\n\r\nexport default function tableReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                currentUser: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport TestReducer from \"./test\";\r\nimport UserReducer from \"./user\";\r\n\r\nexport default combineReducers({\r\n    testReducer: TestReducer,\r\n    userReducer: UserReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Nav from \"./Components/nav\";\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport reducers from \"./Redux/Reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n  );\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <Nav />\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}